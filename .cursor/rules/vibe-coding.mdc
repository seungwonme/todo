---
description: Core rules for AI-assisted Vibe Coding: Focus on TDD with mandatory external search for error resolution, robust context management (early file documentation, small modules, .cursor & README usage), incremental refactoring, and supportive user interaction, including automated quality fixes.
globs:
alwaysApply: true
---
# Rules for Vibe Coding

## General Coding Guidance

- 생성하는 모든 코드는 명확하고, 간결하며, 유지보수 가능해야 합니다.
- 복잡한 로직은 단순화하고 불필요한 추상화는 피하십시오. 꼭 필요한 경우에만 도입하여 복잡성을 관리하십시오
- 모든 공개 API 및 복잡한 로직에는 명확한 주석(예: JSDoc, Python Docstrings)을 작성하십시오. 코드의 의도와 작동 방식을 설명해야 합니다.
- 오류 처리는 항상 명시적으로 수행하며, 사용자에게 친화적인 오류 메시지를 제공하십시오. 단순한 try-catch 블록으로 오류를 숨기지 마십시오.
- 보안을 최우선으로 고려하여 코드를 작성하십시오. 잠재적인 취약점(예: SQL 인젝션, XSS, API 키 노출)을 방지하기 위한 검증 및 이스케이프 처리를 철저히 하십시오.
- 성능을 고려하여 효율적인 알고리즘과 데이터 구조를 선택하십시오. 불필요한 반복이나 계산을 피하십시오.

## Test-Driven Development(TDD)

- 기능 구현 요청 시, 먼저 해당 기능의 요구사항을 충족하는 포괄적인 단위 테스트 케이스를 작성하십시오. (필요시 통합 테스트 포함)
- 테스트 케이스는 긍정적 케이스, 부정적 케이스, 엣지 케이스를 모두 포함해야 합니다.
- 테스트 케이스 작성 후, 해당 테스트를 통과하는 최소한의 코드를 구현하십시오.
- 코드 구현 후 모든 테스트를 실행하고, 실패하는 테스트가 있다면 해당 테스트를 통과하도록 코드를 수정하십시오. 이 과정을 모든 테스트가 통과할 때까지 반복하십시오. 각 과정을 반복할 때마다 웹 검색 또는 공식문서(context7 mcp 활용)에 검색을 필수로 해야합니다.
  - 최대 3회를 초과하여 동일한 오류 수정 루프에 빠지지 않도록 주의하고, 해결이 어려울 경우 사용자에게 도움을 요청하십시오.
- 사용자로부터 테스트 실패 로그가 제공되면, 해당 로그를 분석하여 문제의 원인을 파악하고 코드를 수정하십시오.
- 생성된 테스트 코드는 사람이 쉽게 이해하고 유지보수할 수 있도록 명확하게 작성하십시오.

## Context Management

- 각 코드 파일의 첫 100줄에 해당 파일의 기능과 구현 로직을 명확히 문서화하세요.
  - 파일 검색 시 최대 100줄의 코드를 읽습니다. 파일의 초반부에 주석을 통해 해당 파일의 목적과 주요 로직을 설명하면, Cursor 에이전트가 파일의 역할을 빠르게 파악하여 적절한 처리를 수행할 수 있습니다.
  ```tsx
  /**
   * @file UserProfile.tsx
   * @description 사용자 프로필 페이지 컴포넌트
   *
   * 이 컴포넌트는 사용자의 프로필 정보를 표시하고 수정하는 기능을 제공합니다.
   *
   * 주요 기능:
   * 1. 사용자 기본 정보 표시 (이름, 이메일, 프로필 이미지)
   * 2. 프로필 정보 수정
   * 3. 프로필 이미지 업로드
   *
   * 구현 로직:
   * - Supabase Auth를 통한 사용자 인증 상태 확인
   * - React Query를 사용한 프로필 데이터 fetching
   * - 이미지 업로드를 위한 Supabase Storage 활용
   * - Form 상태 관리를 위한 React Hook Form 사용
   *
   * @dependencies
   * - @supabase/ssr
   * - @tanstack/react-query
   * - react-hook-form
   * - @heroicons/react
   */

  import { useEffect } from "react";
  import { useForm } from "react-hook-form";
  import { useQuery, useMutation } from "@tanstack/react-query";
  import { createClient } from "@/utils/supabase/client";
  import { UserCircleIcon } from "@heroicons/react/24/outline";

  // ... 컴포넌트 구현 ...
  ```
- 기능은 논리적으로 분리된 작은 모듈 또는 패키지로 구성하십시오. 단일 파일이 500 라인을 넘지 않도록 노력하고, 필요시 파일을 분리하는 것을 제안하십시오.
- 새로운 기능을 구현할 때, 기존 프로젝트의 디렉토리 구조와 네이밍 컨벤션을 따르십시오.
- 파일 및 디렉토리 이름은 해당 내용물의 기능을 명확하게 나타내도록 작성하십시오.
- 전체 컨텍스트가 주어질 경우, 주요 파일 및 사용자 지침에 따라 필요한 정보를 요약 및 활용하되, 중요한 세부사항을 놓치지 않도록 주의하십시오.
- 프로젝트의 .cursor 폴더에 있는 디자인 문서, 체크리스트, 추가 규칙 파일들을 항상 참조하여 작업의 일관성을 유지하십시오.
- 프로젝트의 상태와 구조를 `README.md`와 같은 전용 파일에 정기적으로 문서화하세요.

## Refactoring

- 리팩토링은 점진적으로, 작은 단위로 수행하십시오. 대규모의 전면적인 변경은 피하십시오.
- 기존 코드의 스타일과 패러다임을 일관되게 유지하십시오. 새로운 라이브러리나 스타일을 도입해야 할 경우, 사용자에게 명시적인 확인을 요청하십시오.
- 불필요한 추상화 계층을 만들지 마십시오. 코드는 가능한 단순하게 유지하되, 명확성을 희생해서는 안 됩니다.
- 리팩토링 전후로 반드시 테스트를 실행하여 기존 기능이 손상되지 않았는지 확인하십시오.
- 사용자로부터 '잘못된 리팩토링 함정'에 대한 지적(예: 비즈니스 컨텍스트 미이해, 과도한 통합)을 받으면, 해당 피드백을 반영하여 수정하십시오.

## User Instructions

- 사용자의 요청이 모호하거나 불완전하다고 판단되면, 주저하지 말고 명확화를 위한 질문을 하십시오. 추측에 기반하여 코드를 생성하지 마십시오.
- 사용자가 '아이디어 구체화' 또는 '계획 수립' 단계를 요청하면, 단계별 질문을 통해 상세한 명세(`.cursor/prd.md`) 또는 실행 계획(`.cursor/todo.md`)을 도출하도록 지원하십시오.
- 사용자가 '일회용 코드' 또는 '학습 목적의 코드'를 요청할 경우, 유지보수성보다는 기능 구현 및 개념 설명에 더 중점을 둘 수 있습니다. 단, 이 경우에도 기본적인 코드 품질은 유지하십시오.
- 사용자가 제공하는 prd.md, todo.md, README.md 등의 문서는 작업의 핵심적인 가이드라인이므로 반드시 숙지하고 따르십시오.

## Automation

- 품질 검사 도구에서 오류나 경고가 발생하면, 해당 내용을 분석하여 코드를 자동으로 수정하십시오. 이 과정에서 오류/경고가 없을 때까지 반복할 수 있으나, 각 과정마다 웹 검색 또는 공식문서(context7 mcp 활용)에 검색을 필수로 해야합니다.
- 최대 3회를 초과하여 동일한 오류 수정 루프에 빠지지 않도록 주의하고, 해결이 어려울 경우 사용자에게 도움을 요청하십시오.

## Supporting

- 사용자가 기술 용어나 개발 프로세스에 익숙하지 않을 수 있음을 인지하고, 가능한 쉬운 용어로 설명하거나 추가적인 설명을 제공하십시오.
- 사용자가 문제 정의(PRD, 와이어프레임)를 명확히 하도록 돕고, 이를 기반으로 프로토타입을 빠르게 생성하여 시각적인 피드백 루프를 만드십시오.
- 사용자가 'AI가 코드를 잘 작성하도록 프롬프팅'하는 방법을 문의하면, 명확한 역할, 맥락, 작업 지시의 중요성을 설명하고 예시를 제공하십시오.
- 사용자가 '내가 더 똑똑해지기'를 원할 경우, 관련 기술 키워드, 데이터 흐름, 실행 환경 등에 대한 학습을 지원하고, 질문에 상세히 답변하십시오.
- 사용자가 '기능이 스펙대로 동작한다'는 목표를 달성하도록, 테스트 코드 작성 및 실행 과정을 명확히 안내하고, 커밋(저장)의 중요성을 설명하십시오.

<!--
https://www.pixelstech.net/article/1734832711-understanding-cursor-and-windsurf-s-code-indexing-logic
https://blog.sshh.io/p/how-cursor-ai-ide-works
https://www.builder.io/blog/cursor-tips
https://www.builder.io/blog/good-vs-bad-refactoring
https://zarar.dev/good-software-development-habits/
https://nmn.gl/blog/ai-senior-developer
https://blog.yfzhou.fyi/posts/tdd-llm/
https://crawshaw.io/blog/programming-with-llms
https://danieldelaney.net/chat/
https://newsletter.pragmaticengineer.com/p/how-ai-will-change-software-engineering
https://refactoringenglish.com/chapters/rules-for-software-tutorials/
https://qntm.org/devphilo
https://www.dvg.blog/p/takeaways-from-10000-vibe-coded-projects
https://www.commits.world/p/12-ways-to-properly-use-cursor
https://addyo.substack.com/p/vibe-coding-is-not-an-excuse-for
https://endler.dev/2025/best-programmers/
https://manuel.kiessling.net/2025/03/31/how-seasoned-developers-can-achieve-great-results-with-ai-coding-agents/
https://cendyne.dev/posts/2025-03-19-vibe-coding-vs-reality.html
https://www.stdy.blog/vibe-coding-and-the-future-of-developers/
https://www.tibinotes.com/p/practical-ux-for-startups-surviving
https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/
https://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htm
https://www.seangoedecke.com/how-i-use-llms/
https://www.stdy.blog/vibe-coding-101-for-non-developers/
https://eopla.net/magazines/29362#
-->
